import numpy as np

# Constants
hbar = 1.0545718e-34  # JÂ·s
c = 2.99792458e8      # m/s
G = 6.6743e-11        # m^3 kg^-1 s^-2
r_P = np.sqrt(hbar * G / c**3)  # Planck length, ~1.616e-35 m
l = 4.28e26           # m

def w_st(r, s, t):
    T_st = (hbar * c / (2 * np.pi * G * r**2)) * (1 - np.exp(-r / r_P))
    return np.exp(T_st) / sum(np.exp(T_st) for s, t in [(2,0), (0,2), (1,1), (0,1)])

def D_eff(r):
    st_pairs = [(2,0), (0,2), (1,1), (0,1)]
    term1 = sum(w_st(r, s, t) * (s + t - 3) for s, t in st_pairs)
    term2 = np.sqrt(hbar * c / (G * l**2)) * np.log(1 + r / r_P)
    return 3 + term1 + term2

# Example usage
r = np.logspace(-40, 27, 1000)
D_eff_values = [D_eff(ri) for ri in r]
